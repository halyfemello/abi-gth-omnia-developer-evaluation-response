using DeveloperEvaluation.Core.Application.DTOs;
using DeveloperEvaluation.Core.Application.Services;
using DeveloperEvaluation.Core.Domain.Entities;
using FluentAssertions;
using Xunit;

namespace DeveloperEvaluation.Tests.Application.Services;

/// <summary>
/// Testes unit√°rios para SaleFilterBuilder
/// Valida a aplica√ß√£o correta das regras de neg√≥cio de filtragem
/// </summary>
public class SaleFilterBuilderTests
{
    private readonly SaleFilterBuilder _filterBuilder;

    public SaleFilterBuilderTests()
    {
        _filterBuilder = new SaleFilterBuilder();
    }
    [Fact(DisplayName = "üü¢ Deve retornar null quando nenhum par√¢metro for fornecido")]
    public void BuildFilter_Should_Return_Null_When_No_Parameters_Provided()
    {
        // Arrange - Configura cen√°rio sem par√¢metros de filtro
        var parameters = new SalesQueryParametersDto();

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica que n√£o h√° filtro quando n√£o h√° par√¢metros
        filter.Should().BeNull("porque n√£o foram fornecidos par√¢metros de filtro");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por n√∫mero da venda com correspond√™ncia exata")]
    public void BuildFilter_Should_Filter_By_SaleNumber_Exact_Match()
    {
        // Arrange - Configura filtro por n√∫mero da venda exato
        var parameters = new SalesQueryParametersDto
        {
            SaleNumber = "SALE-001"
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica se aplica filtro exato por n√∫mero da venda
        filter.Should().NotBeNull("porque foi fornecido n√∫mero da venda");

        // Teste com dados simulados para validar a express√£o
        var testSale = new Sale { SaleNumber = "SALE-001" };
        var compiledFilter = filter!.Compile();
        compiledFilter(testSale).Should().BeTrue("porque o n√∫mero da venda coincide exatamente");

        var testSaleOther = new Sale { SaleNumber = "SALE-002" };
        compiledFilter(testSaleOther).Should().BeFalse("porque o n√∫mero da venda n√£o coincide");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por n√∫mero da venda com wildcard no in√≠cio")]
    public void BuildFilter_Should_Filter_By_SaleNumber_With_Wildcard_Start()
    {
        // Arrange - Configura filtro com wildcard no in√≠cio (termina com)
        var parameters = new SalesQueryParametersDto
        {
            SaleNumber = "*001"
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para wildcard no in√≠cio
        filter.Should().NotBeNull("porque foi fornecido padr√£o com wildcard");

        var testSale = new Sale { SaleNumber = "SALE-001" };
        var compiledFilter = filter!.Compile();
        compiledFilter(testSale).Should().BeTrue("porque a venda termina com '001'");

        var testSaleOther = new Sale { SaleNumber = "SALE-002" };
        compiledFilter(testSaleOther).Should().BeFalse("porque a venda n√£o termina com '001'");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por n√∫mero da venda com wildcard no final")]
    public void BuildFilter_Should_Filter_By_SaleNumber_With_Wildcard_End()
    {
        // Arrange - Configura filtro com wildcard no fim (come√ßa com)
        var parameters = new SalesQueryParametersDto
        {
            SaleNumber = "SALE*"
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para wildcard no fim
        filter.Should().NotBeNull("porque foi fornecido padr√£o com wildcard");

        var testSale = new Sale { SaleNumber = "SALE-001" };
        var compiledFilter = filter!.Compile();
        compiledFilter(testSale).Should().BeTrue("porque a venda come√ßa com 'SALE'");

        var testSaleOther = new Sale { SaleNumber = "ORDER-001" };
        compiledFilter(testSaleOther).Should().BeFalse("porque a venda n√£o come√ßa com 'SALE'");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por n√∫mero da venda com wildcard em ambos os lados")]
    public void BuildFilter_Should_Filter_By_SaleNumber_With_Wildcard_Both()
    {
        // Arrange - Configura filtro com wildcard em ambos os lados (cont√©m)
        var parameters = new SalesQueryParametersDto
        {
            SaleNumber = "*001*"
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para wildcard duplo
        filter.Should().NotBeNull("porque foi fornecido padr√£o com wildcard");

        var testSale = new Sale { SaleNumber = "SALE-001-A" };
        var compiledFilter = filter!.Compile();
        compiledFilter(testSale).Should().BeTrue("porque a venda cont√©m '001'");

        var testSaleOther = new Sale { SaleNumber = "SALE-002-A" };
        compiledFilter(testSaleOther).Should().BeFalse("porque a venda n√£o cont√©m '001'");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por ID do cliente")]
    public void BuildFilter_Should_Filter_By_CustomerId()
    {
        // Arrange - Configura filtro por ID do cliente
        var customerId = Guid.NewGuid();
        var parameters = new SalesQueryParametersDto
        {
            CustomerId = customerId
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para filtro por ID do cliente
        filter.Should().NotBeNull("porque foi fornecido ID do cliente");

        var testSale = new Sale { CustomerId = customerId };
        var compiledFilter = filter!.Compile();
        compiledFilter(testSale).Should().BeTrue("porque o ID do cliente coincide");

        var testSaleOther = new Sale { CustomerId = Guid.NewGuid() };
        compiledFilter(testSaleOther).Should().BeFalse("porque o ID do cliente n√£o coincide");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por intervalo de datas")]
    public void BuildFilter_Should_Filter_By_Date_Range()
    {
        // Arrange - Configura filtro por range de data
        var minDate = new DateTime(2024, 1, 1);
        var maxDate = new DateTime(2024, 12, 31);
        var parameters = new SalesQueryParametersDto
        {
            MinSaleDate = minDate,
            MaxSaleDate = maxDate
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para range de data (inclusive)
        filter.Should().NotBeNull("porque foi fornecido range de data");

        var compiledFilter = filter!.Compile();

        // Teste data dentro do range
        var testSaleInRange = new Sale { SaleDate = new DateTime(2024, 6, 15) };
        compiledFilter(testSaleInRange).Should().BeTrue("porque a data est√° dentro do range");

        // Teste data no limite m√≠nimo (inclusive)
        var testSaleMinBoundary = new Sale { SaleDate = minDate };
        compiledFilter(testSaleMinBoundary).Should().BeTrue("porque a data m√≠nima √© inclusiva");

        // Teste data no limite m√°ximo (inclusive)
        var testSaleMaxBoundary = new Sale { SaleDate = maxDate };
        compiledFilter(testSaleMaxBoundary).Should().BeTrue("porque a data m√°xima √© inclusiva");

        // Teste data fora do range
        var testSaleOutOfRange = new Sale { SaleDate = new DateTime(2023, 12, 31) };
        compiledFilter(testSaleOutOfRange).Should().BeFalse("porque a data est√° fora do range");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por intervalo de valores")]
    public void BuildFilter_Should_Filter_By_Amount_Range()
    {
        // Arrange - Configura filtro por range de valor
        var minAmount = 100m;
        var maxAmount = 1000m;
        var parameters = new SalesQueryParametersDto
        {
            MinTotalAmount = minAmount,
            MaxTotalAmount = maxAmount
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para range de valor (inclusive)
        filter.Should().NotBeNull("porque foi fornecido range de valor");

        var compiledFilter = filter!.Compile();

        // Teste valor dentro do range - criamos uma venda com item para calcular total
        var testSaleInRange = new Sale();
        testSaleInRange.AddItem(new SaleItem { Quantity = 1, UnitPrice = 500m });
        testSaleInRange.CalculateTotalAmount();
        compiledFilter(testSaleInRange).Should().BeTrue("porque o valor est√° dentro do range");

        // Teste valor no limite m√≠nimo (inclusive)
        var testSaleMinBoundary = new Sale();
        testSaleMinBoundary.AddItem(new SaleItem { Quantity = 1, UnitPrice = minAmount });
        testSaleMinBoundary.CalculateTotalAmount();
        compiledFilter(testSaleMinBoundary).Should().BeTrue("porque o valor m√≠nimo √© inclusivo");

        // Teste valor no limite m√°ximo (inclusive)
        var testSaleMaxBoundary = new Sale();
        testSaleMaxBoundary.AddItem(new SaleItem { Quantity = 1, UnitPrice = maxAmount });
        testSaleMaxBoundary.CalculateTotalAmount();
        compiledFilter(testSaleMaxBoundary).Should().BeTrue("porque o valor m√°ximo √© inclusivo");

        // Teste valor fora do range
        var testSaleOutOfRange = new Sale();
        testSaleOutOfRange.AddItem(new SaleItem { Quantity = 1, UnitPrice = 50m });
        testSaleOutOfRange.CalculateTotalAmount();
        compiledFilter(testSaleOutOfRange).Should().BeFalse("porque o valor est√° fora do range");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por status ativo")]
    public void BuildFilter_Should_Filter_By_Status_Active()
    {
        // Arrange - Configura filtro por status ativo
        var parameters = new SalesQueryParametersDto
        {
            Status = "active"
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para status ativo
        filter.Should().NotBeNull("porque foi fornecido status");

        var compiledFilter = filter!.Compile();

        // Teste venda ativa (n√£o cancelada por padr√£o)
        var testActiveSale = new Sale();
        compiledFilter(testActiveSale).Should().BeTrue("porque a venda est√° ativa (n√£o cancelada)");

        // Teste venda cancelada
        var testCancelledSale = new Sale();
        testCancelledSale.AddItem(new SaleItem { Quantity = 1, UnitPrice = 100m }); // Precisa ter item para cancelar
        testCancelledSale.Cancel();
        compiledFilter(testCancelledSale).Should().BeFalse("porque a venda est√° cancelada");
    }

    [Fact(DisplayName = "üü¢ Deve filtrar por status cancelado")]
    public void BuildFilter_Should_Filter_By_Status_Cancelled()
    {
        // Arrange - Configura filtro por status cancelado
        var parameters = new SalesQueryParametersDto
        {
            Status = "cancelled"
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica aplica√ß√£o da regra de neg√≥cio para status cancelado
        filter.Should().NotBeNull("porque foi fornecido status");

        var compiledFilter = filter!.Compile();

        // Teste venda cancelada
        var testCancelledSale = new Sale();
        testCancelledSale.AddItem(new SaleItem { Quantity = 1, UnitPrice = 100m }); // Precisa ter item para cancelar
        testCancelledSale.Cancel();
        compiledFilter(testCancelledSale).Should().BeTrue("porque a venda est√° cancelada");

        // Teste venda ativa
        var testActiveSale = new Sale();
        compiledFilter(testActiveSale).Should().BeFalse("porque a venda est√° ativa");
    }

    [Fact(DisplayName = "üü¢ Deve ignorar status inv√°lido")]
    public void BuildFilter_Should_Ignore_Invalid_Status()
    {
        // Arrange - Configura filtro com status inv√°lido
        var parameters = new SalesQueryParametersDto
        {
            Status = "invalid-status"
        };

        // Act - Executa constru√ß√£o do filtro
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica que status inv√°lido √© ignorado conforme regra de neg√≥cio
        filter.Should().BeNull("porque status inv√°lido deve ser ignorado");
    }

    [Fact(DisplayName = "üü¢ Deve combinar m√∫ltiplos filtros com operador AND")]
    public void BuildFilter_Should_Combine_Multiple_Filters_With_AND()
    {
        // Arrange - Configura m√∫ltiplos filtros para testar combina√ß√£o com AND
        var customerId = Guid.NewGuid();
        var parameters = new SalesQueryParametersDto
        {
            SaleNumber = "SALE*",
            CustomerId = customerId,
            MinTotalAmount = 100m,
            Status = "active"
        };

        // Act - Executa constru√ß√£o do filtro combinado
        var filter = _filterBuilder.BuildFilter(parameters);

        // Assert - Verifica que m√∫ltiplos filtros s√£o combinados com AND
        filter.Should().NotBeNull("porque foram fornecidos m√∫ltiplos filtros");

        var compiledFilter = filter!.Compile();

        // Teste venda que atende todos os crit√©rios
        var testSaleMatching = new Sale
        {
            SaleNumber = "SALE-001",
            CustomerId = customerId
        };
        testSaleMatching.AddItem(new SaleItem { Quantity = 1, UnitPrice = 500m });
        testSaleMatching.CalculateTotalAmount();
        // IsCancelled j√° √© false por padr√£o (ativa)
        compiledFilter(testSaleMatching).Should().BeTrue("porque atende todos os crit√©rios");

        // Teste venda que n√£o atende um dos crit√©rios (valor baixo)
        var testSaleNotMatching = new Sale
        {
            SaleNumber = "SALE-001",
            CustomerId = customerId
        };
        testSaleNotMatching.AddItem(new SaleItem { Quantity = 1, UnitPrice = 50m });
        testSaleNotMatching.CalculateTotalAmount();
        // IsCancelled j√° √© false por padr√£o (ativa)
        compiledFilter(testSaleNotMatching).Should().BeFalse("porque n√£o atende o crit√©rio de valor m√≠nimo");
    }
}
